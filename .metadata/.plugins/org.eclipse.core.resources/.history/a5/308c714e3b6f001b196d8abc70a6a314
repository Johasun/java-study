import java.util.ArrayList;

//Today Point


public class Ex02_ArrayList {
	public static void main(String[] args) {
		// List 인터페이스 구현 : 순서가 있고, 중복 허용 데이터 집합 다룰 때 쓰는 클래스
		
		ArrayList arraylist = new ArrayList();
		// Object 타입을 가지는 정적 배열 heap 생성
		arraylist.add(100);
		arraylist.add(200);
		arraylist.add(300);
		
		for(int i = 0; i< arraylist.size(); i++) {
			System.out.println(arraylist.get(i));
		}
		
		System.out.println(arraylist.toString());
		
		System.out.println(arraylist.get(0));
		
		//순차적인 데이터 다루는 것이 .... (장단점)
		//비순차적인 데이터 추가, 삭제 >> ArrayList 적합하지 않아요 >> 순서가 있는 데이터 집합
		//[100, 200, 300] >>
		arraylist.add(0, 111);
		System.out.println(arraylist); // [111, 100, 200, 300]
		arraylist.add(400);
		System.out.println(arraylist); // [111, 100, 200, 300, 400]
		
		// arraylist.remove(100); // java.lang.IndexOutOfBoundsException: Index 100 out of bounds 
		// 100을 인덱스 번호로 봄
		
		// [111, 100, 200, 300, 400] arraylist
		// ArrayList 함수 공부 (String 함수 학습)
		System.out.println(arraylist.contains(200)); //true "200" 이라는 값을 가지고 있는지 확인
		System.out.println(arraylist.contains(2000)); //false
		
		arraylist.clear(); // 데이터만 삭제 (공간은 유지)
		System.out.println(arraylist.size());
		System.out.println(arraylist.isEmpty()); //true
		
		arraylist.add(101);
		arraylist.add(102);
		arraylist.add(103);
		
		System.out.println(arraylist.isEmpty()); //false
		
		System.out.println("삭제 전: "+arraylist.size()); //3
		Object value = arraylist.remove(0); // 0번째 방의 값을 삭제 .... 그 값을 return 
		System.out.println("value: "+value);
		System.out.println("삭제 후 : "+arraylist.size());
		System.out.println(arraylist);
		
		
	}
}
